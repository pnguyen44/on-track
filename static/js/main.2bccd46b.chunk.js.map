{"version":3,"sources":["to-do-icon.png","todo/components/TodoItem.js","todo/Todos.js","navBar/NavBar.js","todo/components/NewTodoItem.js","about/About.js","apiConfig.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TodoItem","getStyles","background","padding","borderBottom","textDecoration","_this","props","item","completed","_this$props$item","this","_id","name","react_default","a","createElement","style","type","checked","onChange","toogleComplete","bind","btnStyle","onClick","removeItem","Component","color","border","fontSize","float","cursor","fontWeight","Todos","todos","map","components_TodoItem","key","styles","root","flexGrow","grow","menuButton","marginLeft","marginRight","link","NavBar","AppBar_default","position","Toolbar_default","src","require","alt","width","paddingRight","Typography_default","variant","react_router_dom","to","NewTodoItem","state","handleChange","e","_e$target","target","value","setState","Object","defineProperty","handleSubmit","preventDefault","newTodoItem","display","onSubmit","required","flex","placeholder","className","textAlign","About","Fragment","apiUrls","apiUrl","window","location","hostname","App","id","axios","url","method","headers","Content-Type","data","then","res","todo","fetch","toConsumableArray","filter","console","log","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","body","JSON","stringify","abrupt","sent","stop","json","concat","_this2","_this3","basename","navBar_NavBar","react_router","exact","path","render","components_NewTodoItem","todo_Todos","component","Boolean","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2bccd46b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/to-do-icon.a92de81b.png\";","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\n\nclass TodoItem extends Component {\n\n  getStyles = () => {\n    return {\n      background: '#3f51b530',\n      padding: '10px',\n      borderBottom: '1px white solid',\n      // fontStyle: 'italic',\n      // color: 'grey',\n      textDecoration: this.props.item.completed ? 'line-through' : 'none'\n    }\n  }\n\n  render() {\n    const {_id, name} = this.props.item\n    return (\n      <div style={this.getStyles()}>\n        <p>\n        <input\n          type='checkbox'\n          checked={this.props.item.completed}\n          onChange={this.props.toogleComplete.bind(this,_id,this.props.item)}\n        />{\"  \"}\n          {name}\n          <button\n            style={btnStyle}\n            onClick={this.props.removeItem.bind(this,_id)}>\n          X</button>\n        </p>\n      </div>\n    )\n  }\n}\n\nTodoItem.propTypes = {\n  item: PropTypes.object.isRequired,\n}\n\nconst btnStyle = {\n  background: 'rgba(0, 0, 0, 0)',\n  color: 'red',\n  border: 'none',\n  fontSize: 14,\n  padding: '5px 10px',\n  float: 'right',\n  cursor: 'pointer',\n  fontWeight: 900\n}\n\nexport default TodoItem\n","import React, {Component} from 'react'\nimport TodoItem from './components/TodoItem'\nimport PropTypes from 'prop-types'\n\n\nclass Todos extends Component {\n  render(){\n    return this.props.todos.map((item) => (\n      <TodoItem\n        key={item._id} item={item}\n        toogleComplete={this.props.toogleComplete}\n        removeItem={this.props.removeItem}\n      />\n    ));\n\n  }\n}\n\nTodos.propTypes = {\n  todos: PropTypes.array.isRequired,\n}\n\nexport default Todos\n","import React from 'react'\nimport {Link} from 'react-router-dom'\n// import PropTypes from 'prop-types';\n// import { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n// import Button from '@material-ui/core/Button';\n// import IconButton from '@material-ui/core/IconButton';\n// import MenuIcon from '@material-ui/icons/Menu';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n  link: {\n    float: 'right',\n    marginLeft: 27,\n    color: 'white'\n  }\n};\n\nconst NavBar = () => {\n  return(\n    <div style={styles.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n        <img src={require('../to-do-icon.png')} alt='app-logo' style={{width:'58px', marginLeft:'1vw', paddingRight:'14px'}} />\n          <Typography variant=\"h6\" color=\"inherit\" style={styles.grow}>\n            On Track\n          </Typography>\n\n          <Link style={styles.link} to='/'>Home</Link>\n          <Link style={styles.link} to='/about'>About</Link>\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n}\n\nexport default NavBar\n","import React, { Component } from 'react'\n\nclass NewTodoItem extends Component {\n  state = {\n    name: ''\n  }\n\n  handleChange = (e) => {\n    const {name,value} = e.target\n    this.setState({[name]: value})\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault()\n    this.props.newTodoItem(this.state.name)\n    // clear state\n    this.setState({name: ''})\n  }\n  render() {\n    return (\n      <div>\n        <form style={{display: 'flex'}} onSubmit={this.handleSubmit}>\n          <input\n            type='text'\n            name='name'\n            required\n            value={this.state.name}\n            style={{flex: '36', padding: '10px'}}\n            placeholder='Add item'\n            onChange={this.handleChange}\n          />\n\n          <input\n            type='submit'\n            value='Add'\n            className='btn'\n            style={{flex:'1'}}\n          />\n        </form>\n      </div>\n    )\n  }\n\n}\n\nexport default NewTodoItem\n","import React from 'react'\n\nconst styles = {\n  textAlign: 'center'\n}\n\nfunction About() {\n  return (\n    <React.Fragment>\n      <h2 style={styles}>A to-do app built using react.</h2>\n    </React.Fragment>\n  )\n}\n\nexport default About\n","let apiUrl\nconst apiUrls = {\n  production: 'https://on-track-api.herokuapp.com',\n  development: 'http://localhost:8000'\n}\n\nif (window.location.hostname === 'localhost') {\n  apiUrl = apiUrls.development\n} else {\n  apiUrl = apiUrls.production\n}\n\n\nexport default apiUrl\n","import React, { Component } from 'react';\nimport {BrowserRouter as Router, Route } from 'react-router-dom'\nimport './App.css';\nimport Todos from './todo/Todos'\nimport NavBar from './navBar/NavBar'\nimport NewTodoItem from './todo/components/NewTodoItem'\nimport About from './about/About'\nimport apiUrl from './apiConfig'\nimport axios from 'axios'\n\n\nclass App extends Component {\n  state = {\n    todos: []\n  }\n\ncomponentDidMount() {\n  fetch(apiUrl + '/items')\n    .then(res => {\n      return res.json()\n    })\n    .then(data => {\n      this.setState({todos: data})\n    })\n}\n\ntoogleComplete = (id,item) => {\n  // const item = await this.state.todos.filter(item => item._id === id)\n\n  // (async() => await fetch(apiUrl + '/items/' + id, {\n  //     method: 'PUT',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //     },\n  //     body: JSON.stringify({\n  //       name: item.name,\n  //       completed: !item.completed\n  //     })\n  //   }))()\n  //   .then(jsonData => {\n  //     this.setState({ todos: this.state.todos.map(item => {\n  //       if(item.id === jsonData.data.id) {\n  //         item.completed = !item.completed\n  //       }\n  //       return item\n  //     }) })\n  //   })\n\n  axios({\n    url: apiUrl + '/items/' + id,\n    method:'patch',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: {\n      completed: !item.completed\n    }\n  })\n  .then((res)=> {\n    this.setState({ todos: this.state.todos.map(todo => {\n      if(todo._id === id) {\n        todo.completed = res.data.completed\n      }\n      return todo;\n    }) });\n  })\n}\n\nremoveItem = (id) => {\n  fetch(apiUrl + '/items/' + id, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    })\n  .then(res => this.setState({ todos: [...this.state.todos.filter(todo => todo._id !== id)] }));\n}\n\n newTodoItem = (name) => {\n   console.log('..name')\n   if (name) {\n     (async() => await fetch(apiUrl + '/items/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        name,\n        completed: false\n      })\n    }))()\n    .then(res => res.json())\n    .then(data => {\n      this.setState({ todos: [...this.state.todos, data] })\n    })\n   }\n}\n\n\n // newTodoItem = (name) => {\n //   axios.post(apiUrl + '/items', {\n //     name,\n //     completed: false\n //   })\n //   .then(res => {\n //     this.setState({ todos: [...this.state.todos, res.data] })\n //    })\n // }\n\n  render() {\n    return (\n      <Router basename='/on-track'>\n            <NavBar/>\n            <div className='container'>\n              <Route exact path='/' render={props => (\n                <React.Fragment>\n                  <NewTodoItem newTodoItem={this.newTodoItem}/>\n                    <Todos\n                      todos={this.state.todos}\n                      toogleComplete={this.toogleComplete}\n                      removeItem={this.removeItem}\n                    />\n                </React.Fragment>\n              )}/>\n              <Route path='/about' component={About}/>\n          </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}