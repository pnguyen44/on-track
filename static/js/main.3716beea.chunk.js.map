{"version":3,"sources":["to-do-icon.png","todos/components/TodoItem.js","navBar/NavBar.js","todos/components/NewTodoItem.js","about/About.js","apiConfig.js","todos/api.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TodoItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","id","state","name","toogleEditable","handleChange","e","setState","target","value","disableEditable","handleDoneBtnClick","onRenameTodo","getStyles","background","padding","borderBottom","textDecoration","item","completed","hideUpdateBtn","_id","react_default","a","createElement","style","btnStyle","className","onClick","onDeleteTodo","bind","type","checked","onChange","onUpdateCompleted","react_contenteditable_default","html","disabled","tagName","styles","notEditable","editable","Component","backgroundColor","border","fontSize","float","cursor","fontWeight","justifyContent","root","flexGrow","grow","menuButton","marginLeft","marginRight","link","color","NavBar","AppBar_default","position","Toolbar_default","src","require","alt","width","paddingRight","Typography_default","variant","react_router_dom","to","NewTodoItem","_e$target","defineProperty","handleSubmit","preventDefault","onCreateTodo","display","onSubmit","required","flex","placeholder","textAlign","About","Fragment","apiUrls","apiUrl","window","location","hostname","updateCompleted","fetch","method","headers","Content-Type","body","JSON","stringify","deleteTodo","createTodo","renameTodo","newName","App","todos","flashMessage","flashType","flash","message","clearTimeout","messageTimeout","setTimeout","then","response","json","res","map","todo","toConsumableArray","filter","data","concat","_this2","onGetTodos","_this3","_this$state","todosComponent","components_TodoItem","key","basename","navBar_NavBar","react_router","exact","path","render","components_NewTodoItem","component","Boolean","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3716beea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/to-do-icon.a92de81b.png\";","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport ContentEditable from \"react-contenteditable\";\n\nclass TodoItem extends Component {\n  constructor(props) {\n  super(props);\n    this.state = {\n      disableEditable: true,\n      hideUpdateBtn: true,\n      name: props.item.name,\n      id: null\n    };\n  }\n\n\n  handleClick = (id) => {\n    // this.setState({id: id})\n    const name = this.state.name\n    if (name) {\n      this.toogleEditable()\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({name: e.target.value})\n  }\n\n  toogleEditable = () => {\n    this.setState({disableEditable: !this.state.disableEditable})\n  }\n  handleDoneBtnClick = (id) => {\n    // e.preventDefault()\n    this.props.onRenameTodo(id, this.state.name)\n    this.toogleEditable()\n  }\n\n\n  getStyles = () => {\n    return {\n      background: '#3f51b530',\n      padding: '10px',\n      borderBottom: '1px white solid',\n      // fontStyle: 'italic',\n      // color: 'grey',\n      textDecoration: this.props.item.completed ? 'line-through' : 'none'\n    }\n  }\n\n\n\n  render() {\n    const _id = this.props.item._id\n    return (\n      <div style={this.getStyles()}>\n        <button\n        style={btnStyle}\n        className=\"material-icons\"\n        onClick={this.props.onDeleteTodo.bind(this,_id)}>\n          delete\n        </button>\n\n        <input\n          type='checkbox'\n          checked={this.props.item.completed}\n          onChange={this.props.onUpdateCompleted.bind(this,_id,this.props.item)}\n        />&nbsp;&nbsp;\n        <ContentEditable\n            html={this.state.name} // innerHTML of the editable div\n            disabled={this.state.disableEditable} // use true to disable edition\n            onChange={this.handleChange} // handle innerHTML change\n            tagName='span'\n            className='todo-item-name'\n            style={this.state.disableEditable ? styles.notEditable : styles.editable }\n        />\n\n        {this.state.disableEditable ?\n          <button\n            style={btnStyle}\n            className=\"material-icons\"\n            onClick={this.handleClick.bind(this,_id)}>edit\n          </button>\n        :\n          <button\n          style={btnStyle}\n          type='submit'\n          className=\"material-icons\"\n          onClick={this.handleDoneBtnClick.bind(this, _id)}>done\n          </button>\n        }\n      </div>\n    )\n  }\n}\n\nTodoItem.propTypes = {\n  item: PropTypes.object.isRequired,\n}\n\nconst styles = {\n  editable: {\n    backgroundColor: 'lightyellow'\n  },\n}\n\nconst btnStyle = {\n  background: 'rgba(0, 0, 0, 0)',\n  // color: 'lightred',\n  border: 'none',\n  fontSize: 25,\n  padding: '0px 1px',\n  float: 'right',\n  cursor: 'pointer',\n  fontWeight: 900,\n  justifyContent:'flex-end'\n}\n\nexport default TodoItem\n","import React from 'react'\nimport {Link} from 'react-router-dom'\n// import PropTypes from 'prop-types';\n// import { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n// import Button from '@material-ui/core/Button';\n// import IconButton from '@material-ui/core/IconButton';\n// import MenuIcon from '@material-ui/icons/Menu';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n  link: {\n    float: 'right',\n    marginRight: 30,\n    color: 'white'\n  }\n};\n\nconst NavBar = () => {\n  return(\n    <div style={styles.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n        <img src={require('../to-do-icon.png')} alt='app-logo' style={{width:'58px', marginLeft:'1vw', paddingRight:'14px'}} />\n          <Typography variant=\"h6\" color=\"inherit\" style={styles.grow}>\n            On Track\n          </Typography>\n\n          <Link className='material-icons' style={styles.link} to='/'>home</Link>\n          <Link className='material-icons' style={styles.link} to='/about'>info</Link>\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n}\n\nexport default NavBar\n","import React, { Component } from 'react'\n\nclass NewTodoItem extends Component {\n  state = {\n    name: ''\n  }\n\n  handleChange = (e) => {\n    const {name,value} = e.target\n    this.setState({[name]: value})\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault()\n    this.props.onCreateTodo(this.state.name)\n    // clear state\n    this.setState({name: ''})\n  }\n  render() {\n    return (\n      <div>\n        <form style={{display: 'flex'}} onSubmit={this.handleSubmit}>\n          <input\n            type='text'\n            name='name'\n            required\n            value={this.state.name}\n            style={{flex: '36', padding: '10px'}}\n            placeholder='Add item'\n            onChange={this.handleChange}\n          />\n\n          <input\n            type='submit'\n            value='add_circle'\n            className='btn material-icons'\n            style={{flex:'1'}}\n          />\n        </form>\n      </div>\n    )\n  }\n\n}\n\nexport default NewTodoItem\n","import React from 'react'\n\nconst styles = {\n  textAlign: 'center'\n}\n\nfunction About() {\n  return (\n    <React.Fragment>\n      <h2 style={styles}>A to-do app built using react.</h2>\n    </React.Fragment>\n  )\n}\n\nexport default About\n","let apiUrl\nconst apiUrls = {\n  production: 'https://on-track-api.herokuapp.com',\n  development: 'http://localhost:8000'\n}\n\nif (window.location.hostname === 'localhost') {\n  apiUrl = apiUrls.development\n} else {\n  apiUrl = apiUrls.production\n}\n\n\nexport default apiUrl\n","import apiUrl from '../apiConfig'\n\n\nexport const updateCompleted = (id,item) => {\n  return fetch(apiUrl + '/items/' + id, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      completed: !item.completed\n    })\n  })\n}\n\nexport const getTodos = () => {\n  return fetch(apiUrl + '/items', {\n    headers: {\n      'Content-Type': 'application/json',\n    }\n  })\n}\n\nexport const deleteTodo  = (id) => {\n  return  fetch(apiUrl + '/items/' + id, {\n            method: 'DELETE',\n            headers: {\n              'Content-Type': 'application/json',\n            }\n          })\n}\n\nexport const createTodo = name => {\n  return fetch(apiUrl + '/items/', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      name,\n      completed: false\n    })\n  })\n}\n\nexport const renameTodo = (id, newName) => {\n  return fetch(apiUrl + '/items/' + id, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      name: newName\n    })\n  })\n}\n","import React, { Component } from 'react';\nimport {BrowserRouter as Router, Route } from 'react-router-dom'\nimport './App.css';\nimport TodoItem from './todos/components/TodoItem'\nimport NavBar from './navBar/NavBar'\nimport NewTodoItem from './todos/components/NewTodoItem'\nimport About from './about/About'\nimport {updateCompleted, getTodos, deleteTodo, createTodo, renameTodo} from './todos/api'\n\n\nclass App extends Component {\n\n  state = {\n    todos: [],\n    flashMessage: '',\n    flashType: null,\n  }\n\n  flash = (message, type) => {\n    this.setState({flashMessage: message, flashType: type})\n    clearTimeout(this.messageTimeout)\n    this.messageTimeout = setTimeout(() => this.setState({flashMessage: null}),2000)\n  }\n\n  onGetTodos() {\n     getTodos()\n     .then(res => {\n       return res.json()\n     })\n     .then(data => {\n       this.setState({todos: data})\n     })\n  }\n\n  componentDidMount() {\n    this.onGetTodos()\n  }\n\n  onUpdateCompleted = (id,item) => {\n    updateCompleted(id,item)\n    .then(response => response.json())\n    .then(res=> {\n      this.setState({ todos: this.state.todos.map(todo => {\n        if(todo._id === id) {\n          todo.completed = res.completed\n        }\n        return todo;\n      }) });\n    })\n  }\n\n  onDeleteTodo = (id) => {\n    deleteTodo(id)\n    .then(res => this.setState({ todos: [...this.state.todos.filter(todo => todo._id !== id)] }));\n  }\n\n   onCreateTodo = (name) => {\n     if (name) {\n       createTodo(name)\n      .then(res => res.json())\n      .then(data => {\n        this.setState({ todos: [...this.state.todos, data] })\n      })\n     }\n  }\n\n  onRenameTodo = (id,newName) => {\n    if(newName) {\n      renameTodo(id, newName)\n    } else {\n      return this.flash('Name Required', 'flash-error')\n    }\n  }\n\n  render() {\n    const {flashMessage, flashType} = this.state\n    const todosComponent = this.state.todos.map(item => <TodoItem  key={item._id} item={item} onUpdateCompleted={this.onUpdateCompleted} onDeleteTodo={this.onDeleteTodo} onRenameTodo={this.onRenameTodo}/>)\n    return (\n      <Router basename='/on-track'>\n            <NavBar/>\n            <div className='container'>\n              {flashMessage && <h3 className={flashType}>{flashMessage}</h3>}\n              <Route exact path='/' render={props => (\n                <React.Fragment>\n                  <NewTodoItem onCreateTodo={this.onCreateTodo}/>\n                  <div className='todo-list'>\n                  {todosComponent}\n                  </div>\n                </React.Fragment>\n              )}/>\n              <Route path='/about' component={About}/>\n          </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}