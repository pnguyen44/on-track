{"version":3,"sources":["to-do-icon.png","navBar/NavBar.js","todos/components/NewTodoItem.js","about/About.js","apiConfig.js","todos/api.js","todos/components/TodoItem.js","todos/components/Todos.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","styles","root","flexGrow","grow","menuButton","marginLeft","marginRight","link","float","color","NavBar","react_default","a","createElement","style","AppBar_default","position","Toolbar_default","src","require","alt","width","paddingRight","Typography_default","variant","react_router_dom","className","to","NewTodoItem","state","name","handleChange","e","_e$target","target","value","_this","setState","Object","defineProperty","handleSubmit","preventDefault","props","onCreateTodo","display","onSubmit","this","type","required","flex","padding","placeholder","onChange","Component","textAlign","About","Fragment","apiUrls","apiUrl","window","location","hostname","updateCompleted","id","item","fetch","method","headers","Content-Type","body","JSON","stringify","completed","deleteTodo","createTodo","renameTodo","newName","TodoItem","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","pasteAsPlainText","event","text","clipboardData","getData","document","execCommand","disableNewlines","keyCode","which","returnValue","modifiedVal","replace","toggleEditable","editable","handleDoneBtnClick","flash","onRenameTodo","handleCancelClick","oldName","todo","getStyles","background","borderBottom","textDecoration","renderBtns","btnStyle","onClick","onDeleteTodo","bind","assertThisInitialized","_id","_this2","then","res","json","data","onGetTodo","checked","onUpdateCompleted","react_contenteditable_default","html","disabled","onPaste","onKeyPress","tagName","backgroundColor","border","fontSize","cursor","fontWeight","justifyContent","Todos","_this$props","todos","todosComponent","map","components_TodoItem","key","App","message","flashMessage","flashType","clearTimeout","messageTimeout","setTimeout","response","toConsumableArray","filter","concat","onGetTodos","_this3","_this$state","basename","navBar_NavBar","react_router","exact","path","render","components_NewTodoItem","components_Todos","component","Boolean","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d2ff0e3a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/to-do-icon.a92de81b.png\";","import React from 'react'\nimport {Link} from 'react-router-dom'\n// import PropTypes from 'prop-types';\n// import { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n// import Button from '@material-ui/core/Button';\n// import IconButton from '@material-ui/core/IconButton';\n// import MenuIcon from '@material-ui/icons/Menu';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n  link: {\n    float: 'right',\n    marginRight: 30,\n    color: 'white'\n  }\n};\n\nconst NavBar = () => {\n  return(\n    <div style={styles.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n        <img src={require('../to-do-icon.png')} alt='app-logo' style={{width:'58px', marginLeft:'1vw', paddingRight:'14px'}} />\n          <Typography variant=\"h6\" color=\"inherit\" style={styles.grow}>\n            On Track\n          </Typography>\n\n          <Link className='material-icons' style={styles.link} to='/'>home</Link>\n          <Link className='material-icons' style={styles.link} to='/about'>info</Link>\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n}\n\nexport default NavBar\n","import React, { Component } from 'react'\n\nclass NewTodoItem extends Component {\n  state = {\n    name: ''\n  }\n\n  handleChange = (e) => {\n    const {name,value} = e.target\n    this.setState({[name]: value})\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault()\n    this.props.onCreateTodo(this.state.name)\n    // clear state\n    this.setState({name: ''})\n  }\n  render() {\n    return (\n      <div>\n        <form style={{display: 'flex'}} onSubmit={this.handleSubmit}>\n          <input\n            type='text'\n            name='name'\n            required\n            value={this.state.name}\n            style={{flex: '36', padding: '10px'}}\n            placeholder='Add item'\n            onChange={this.handleChange}\n          />\n\n          <input\n            type='submit'\n            value='add_circle'\n            className='btn material-icons'\n            style={{flex:'1'}}\n          />\n        </form>\n      </div>\n    )\n  }\n\n}\n\nexport default NewTodoItem\n","import React from 'react'\n\nconst styles = {\n  textAlign: 'center'\n}\n\nfunction About() {\n  return (\n    <React.Fragment>\n      <h2 style={styles}>A to-do app built using react.</h2>\n    </React.Fragment>\n  )\n}\n\nexport default About\n","let apiUrl\nconst apiUrls = {\n  production: 'https://on-track-api.herokuapp.com',\n  development: 'http://localhost:8000'\n}\n\nif (window.location.hostname === 'localhost') {\n  apiUrl = apiUrls.development\n} else {\n  apiUrl = apiUrls.production\n}\n\n\nexport default apiUrl\n","import apiUrl from '../apiConfig'\n\n\nexport const updateCompleted = (id,item) => {\n  return fetch(apiUrl + '/items/' + id, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      completed: !item.completed\n    })\n  })\n}\n\nexport const getTodos = () => {\n  return fetch(apiUrl + '/items', {\n    headers: {\n      'Content-Type': 'application/json',\n    }\n  })\n}\n\nexport const getTodo = (id) => {\n  return fetch(apiUrl + '/items/' + id, {\n    headers: {\n      'Content-Type': 'application/json',\n    }\n  })\n}\n\nexport const deleteTodo  = (id) => {\n  return  fetch(apiUrl + '/items/' + id, {\n            method: 'DELETE',\n            headers: {\n              'Content-Type': 'application/json',\n            }\n          })\n}\n\nexport const createTodo = name => {\n  return fetch(apiUrl + '/items/', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      name,\n      completed: false\n    })\n  })\n}\n\nexport const renameTodo = (id, newName) => {\n  return fetch(apiUrl + '/items/' + id, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      name: newName\n    })\n  })\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport ContentEditable from \"react-contenteditable\";\nimport {getTodo} from '../api'\n\nclass TodoItem extends Component {\n  constructor(props) {\n  super(props);\n    this.state = {\n      editable: false ,\n      name: props.item.name,\n      todo: {}\n    };\n    this.id = this.props.item._id\n  }\n\n  onGetTodo() {\n     getTodo(this.id)\n     .then(res => {\n       return res.json()\n     })\n     .then(data => {\n       this.setState({todo: data})\n     })\n  }\n\n  componentDidMount() {\n    this.onGetTodo()\n  }\n\n  pasteAsPlainText = event => {\n  event.preventDefault()\n\n  const text = event.clipboardData.getData('text/plain')\n  document.execCommand('insertHTML', false, text)\n}\n\ndisableNewlines = event => {\n  const keyCode = event.keyCode || event.which\n\n  if (keyCode === 13) {\n    event.returnValue = false\n    if (event.preventDefault) event.preventDefault()\n  }\n}\n\n  handleChange = (e) => {\n    // Handling ContentEditable component issue with special character\n    const trimSpaces = string => {\n      return string\n        .replace(/&nbsp;/g, '')\n        .replace(/&amp;/g, '&')\n        .replace(/&gt;/g, '>')\n        .replace(/&lt;/g, '<')\n        .replace(/<br>/g, '')\n    }\n    const {value} = e.target\n    let modifiedVal\n    if(value) {\n       modifiedVal = trimSpaces(value)\n    } else {\n      modifiedVal = ''\n    }\n    this.setState({name: modifiedVal})\n  }\n\n  toggleEditable = () => {\n    this.setState({editable: !this.state.editable})\n  }\n\n  handleDoneBtnClick = () => {\n    const {flash} = this.props\n    if (this.state.name) {\n      this.toggleEditable()\n      this.props.onRenameTodo(this.id, this.state.name)\n    } else {\n      return flash('Name Required', 'flash-error')\n    }\n\n  }\n  handleCancelClick = () => {\n    const oldName = this.state.todo.name\n    this.setState({name:oldName})\n    this.toggleEditable()\n  }\n\n\n  getStyles = () => {\n    return {\n      background: '#3f51b530',\n      padding: '10px',\n      borderBottom: '1px white solid',\n      // fontStyle: 'italic',\n      // color: 'grey',\n      textDecoration: this.props.item.completed ? 'line-through' : 'none'\n    }\n  }\n\nrenderBtns = () => {\n  const {editable} = this.state\n\n  if (!editable) {\n    return (\n      <React.Fragment>\n        <button\n        style={btnStyle}\n        className=\"material-icons\"\n        onClick={this.props.onDeleteTodo.bind(this, this.id)}>\n        delete\n        </button>\n\n        <button\n          style={btnStyle}\n          className=\"material-icons\"\n          onClick={this.toggleEditable}>edit\n        </button>\n      </React.Fragment>\n  )\n  } else {\n\n    return (\n      <React.Fragment>\n      <button\n      style={btnStyle}\n      className=\"material-icons\"\n      onClick={this.handleCancelClick}>cancel\n      </button>\n\n      <button\n      style={btnStyle}\n      type='submit'\n      className=\"material-icons\"\n      onClick={this.handleDoneBtnClick}>done\n      </button>\n      </React.Fragment>\n    )\n  }\n}\n\n\n  render() {\n    const _id = this.props.item._id\n    return (\n      <div style={this.getStyles()}>\n\n        <input\n          type='checkbox'\n          checked={this.props.item.completed}\n          onChange={this.props.onUpdateCompleted.bind(this,_id,this.props.item)}\n        />&nbsp;&nbsp;\n        <ContentEditable\n            html={this.state.name} // innerHTML of the editable div\n            disabled={!this.state.editable} // use true to disable edition\n            onChange={this.handleChange} // handle innerHTML change\n            onPaste={this.pasteAsPlainText}\n            onKeyPress={this.disableNewlines}\n            tagName='span'\n            className='todo-item-name'\n            style={this.state.editable ? styles.editable : null }\n        />\n        {this.renderBtns()}\n      </div>\n    )\n  }\n}\n\nTodoItem.propTypes = {\n  item: PropTypes.object.isRequired,\n}\n\nconst styles = {\n  editable: {\n    backgroundColor: 'lightyellow'\n  },\n}\n\nconst btnStyle = {\n  background: 'rgba(0, 0, 0, 0)',\n  // color: 'lightred',\n  border: 'none',\n  fontSize: 25,\n  padding: '0px 1px',\n  float: 'right',\n  cursor: 'pointer',\n  fontWeight: 900,\n  justifyContent:'flex-end'\n}\n\nexport default TodoItem\n","import React , {Component} from 'react'\n// import {getTodos, updateCompleted, deleteTodo, createTodo, renameTodo} from '../api'\nimport TodoItem from './TodoItem'\n\nclass Todos extends Component {\n  render() {\n    const {flash,todos,onUpdateCompleted, onRenameTodo, onDeleteTodo} = this.props\n    const todosComponent = todos.map(item => <TodoItem  key={item._id} item={item} flash={flash} onUpdateCompleted={onUpdateCompleted} onDeleteTodo={onDeleteTodo} onRenameTodo={onRenameTodo}/>)\n\n    return (\n      <React.Fragment>\n      {todosComponent}\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Todos\n","import React, { Component } from 'react';\nimport {BrowserRouter as Router, Route } from 'react-router-dom'\nimport './App.css';\n// import TodoItem from './todos/components/TodoItem'\nimport NavBar from './navBar/NavBar'\nimport NewTodoItem from './todos/components/NewTodoItem'\nimport About from './about/About'\nimport {updateCompleted, getTodos, deleteTodo, createTodo, renameTodo} from './todos/api'\nimport Todos from './todos/components/Todos'\n\nclass App extends Component {\n  constructor () {\n    super()\n    this.state = {\n      todos: [],\n      flashMessage: '',\n      flashType: null,\n    }\n    // this.onRenameTodo = this.onRenameTodo.bind(this)\n  }\n\n\n  flash = (message, type) => {\n    this.setState({flashMessage: message, flashType: type})\n    clearTimeout(this.messageTimeout)\n    this.messageTimeout = setTimeout(() => this.setState({flashMessage: null}),2000)\n  }\n\n  onGetTodos() {\n     getTodos()\n     .then(res => {\n       return res.json()\n     })\n     .then(data => {\n       this.setState({todos: data})\n     })\n  }\n\n  componentDidMount() {\n    this.onGetTodos()\n  }\n\n  onUpdateCompleted = (id,item) => {\n    updateCompleted(id,item)\n    .then(response => response.json())\n    .then(res=> {\n      this.setState({ todos: this.state.todos.map(todo => {\n        if(todo._id === id) {\n          todo.completed = res.completed\n        }\n        return todo;\n      }) });\n    })\n  }\n\n  onDeleteTodo = (id) => {\n    deleteTodo(id)\n    .then(res => this.setState({ todos: [...this.state.todos.filter(todo => todo._id !== id)] }));\n  }\n\n   onCreateTodo = (name) => {\n     if (name) {\n       createTodo(name)\n      .then(res => res.json())\n      .then(data => {\n        this.setState({ todos: [...this.state.todos, data] })\n      })\n     }\n  }\n\n  onRenameTodo = (id,newName) => {\n    if(newName) {\n      renameTodo(id, newName)\n    } else {\n      return this.flash('Name Required', 'flash-error')\n    }\n  }\n\n  render() {\n    const {flashMessage, flashType} = this.state\n    return (\n      <Router basename='/on-track'>\n            <NavBar/>\n            <div className='container'>\n              {flashMessage && <h3 className={flashType}>{flashMessage}</h3>}\n              <Route exact path='/' render={props => (\n                <React.Fragment>\n                  <NewTodoItem onCreateTodo={this.onCreateTodo}/>\n                  <div className='todo-list'>\n                  <Todos\n                  flash={this.flash}\n                  todos={this.state.todos}\n                  onUpdateCompleted={this.onUpdateCompleted}\n                  onDeleteTodo={this.onDeleteTodo}\n                  onRenameTodo={this.onRenameTodo}\n                  />\n                  </div>\n                </React.Fragment>\n              )}/>\n              <Route path='/about' component={About}/>\n          </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}